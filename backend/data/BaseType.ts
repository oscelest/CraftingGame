import BaseType from "../entity/BaseType";
import ItemClass from "../entity/ItemClass";

export default [
  async () => await new BaseType("Crude Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Crude Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Short Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Long Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Composite Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Recurve Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Bone Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Royal Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Death Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Grove Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Reflex Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Decurve Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Compound Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Sniper Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Ivory Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Highborn Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Decimation Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Thicket Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Steelwood Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Citadel Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Ranger Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Assassin Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Spine Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Imperial Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Harbinger Bow", await ItemClass.findOneByName("Bows")).save(),
  async () => await new BaseType("Maraketh Bow", await ItemClass.findOneByName("Bows")).save(),
  
  async () => await new BaseType("Nailed Fist", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Sharktooth Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Awl", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Cats Paw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Blinder", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Timeworn Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Sparkling Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Fright Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Double Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Thresher Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Gouger", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Tigers Paw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Gut Ripper", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Prehistoric Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Noble Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Eagle Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Twin Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Great White Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Throat Stabber", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Hellions Paw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Eye Gouger", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Vaal Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Imperial Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Terror Claw", await ItemClass.findOneByName("Claws")).save(),
  async () => await new BaseType("Gemini Claw", await ItemClass.findOneByName("Claws")).save(),
  
  
  async () => await new BaseType("Glass Shank", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Skinning Knife", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Carving Knife", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Stiletto", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Boot Knife", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Copper Kris", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Skean", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Flaying Knife", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Imp Dagger", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Prong Dagger", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Butcher Knife", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Poignard", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Boot Blade", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Golden Kris", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Royal Skean", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Trisula", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Fiend Dagger", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Gutting Knife", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Slaughter Knife", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Ambusher", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Ezomyte Dagger", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Platinum Kris", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Imperial Skean", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Demon Dagger", await ItemClass.findOneByName("Daggers")).save(),
  async () => await new BaseType("Sai", await ItemClass.findOneByName("Daggers")).save(),
  
  async () => await new BaseType("Rusted Hatchet", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Jade Hatchet", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Boarding Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Cleaver", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Broad Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Arming Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Decorative Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Spectral Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Etched Hatchet", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Jasper Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Tomahawk", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Wrist Chopper", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("War Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Chest Splitter", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Ceremonial Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Wraith Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Engraved Hatchet", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Karui Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Siege Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Reaver Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Butcher Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Vaal Hatchet", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Royal Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Infernal Axe", await ItemClass.findOneByName("One Hand Axes")).save(),
  async () => await new BaseType("Runic Hatchet", await ItemClass.findOneByName("One Hand Axes")).save(),
  
  async () => await new BaseType("Driftwood Club", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Tribal Club", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Spiked Club", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Stone Hammer", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("War Hammer", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Bladed Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Ceremonial Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Dream Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Wyrm Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Petrified Club", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Barbed Club", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Rock Breaker", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Battle Hammer", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Flanged Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Ornate Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Phantom Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Dragon Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Ancestral Club", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Tenderizer", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Gavel", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Legion Hammer", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Pernarch", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Auric Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Nightmare Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  async () => await new BaseType("Behemoth Mace", await ItemClass.findOneByName("One Hand Maces")).save(),
  
  async () => await new BaseType("Rusted Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Charans Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Copper Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Sabre", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Broad Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("War Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Ancient Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Elegant Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Dusk Blade", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Hook Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Variscite Blade", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Cutlass", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Baselard", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Battle Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Elder Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Graceful Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Twilight Blade", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Grappler", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Gemstone Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Corsair Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Gladius", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Legion Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Vaal Blade", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Eternal Sword", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Midnight Blade", await ItemClass.findOneByName("One Hand Swords")).save(),
  async () => await new BaseType("Tiger Hook", await ItemClass.findOneByName("One Hand Swords")).save(),
  
  async () => await new BaseType("Driftwood Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Darkwood Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Bronze Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Quartz Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Iron Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Ochre Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Ritual Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Shadow Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Grinning Fetish", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Horned Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Sekhem", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Crystal Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Lead Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Blood Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Royal Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Abyssal Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Stag Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Karui Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Tyrants Sekhem", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Opal Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Platinum Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Vaal Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Carnal Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Void Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  async () => await new BaseType("Sambar Sceptre", await ItemClass.findOneByName("Sceptres")).save(),
  
  async () => await new BaseType("Gnarled Branch", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Primitive Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Iron Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Long Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Coiled Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Royal Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Vile Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Crescent Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Woodful Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Military Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Quarterstaff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Serpentine Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Highborn Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Foul Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Moon Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Primordial Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Ezomyte Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Lathi", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Maelstrm Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Imperial Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Judgement Staff", await ItemClass.findOneByName("Staves")).save(),
  async () => await new BaseType("Eclipse Staff", await ItemClass.findOneByName("Staves")).save(),
  
  async () => await new BaseType("Rusted Spike", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Whalebone Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Battered Foil", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Basket Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Jagged Foil", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Antique Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Elegant Foil", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Thorn Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Smallsword", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Wyrmbone Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Burnished Foil", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Estoc", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Serrated Foil", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Primeval Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Fancy Foil", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Apex Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Courtesan Sword", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Dragonbone Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Tempered Foil", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Pecoraro", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Spiraled Foil", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Vaal Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Jewelled Foil", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Harpy Rapier", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  async () => await new BaseType("Dragoon Sword", await ItemClass.findOneByName("Thrusting One Hand Swords")).save(),
  
  async () => await new BaseType("Stone Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Jade Chopper", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Woodsplitter", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Poleaxe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Double Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Gilded Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Shadow Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Dagger Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Jasper Chopper", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Timber Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Headsman Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Labrys", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Noble Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Abyssal Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Karui Chopper", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Talon Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Sundering Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Ezomyte Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Vaal Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Despot Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Void Axe", await ItemClass.findOneByName("Two Hand Axes")).save(),
  async () => await new BaseType("Fleshripper", await ItemClass.findOneByName("Two Hand Axes")).save(),
  
  async () => await new BaseType("Driftwood Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Tribal Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Mallet", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Sledgehammer", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Jagged Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Brass Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Fright Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Morning Star", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Totemic Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Great Mallet", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Steelhead", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Spiny Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Plated Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Dread Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Solar Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Karui Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Colossus Mallet", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Piledriver", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Meatgrinder", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Imperial Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Terror Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  async () => await new BaseType("Coronal Maul", await ItemClass.findOneByName("Two Hand Maces")).save(),
  
  async () => await new BaseType("Corroded Blade", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Longsword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Bastard Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("TwoHanded Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Etched Greatsword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Ornate Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Spectral Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Curved Blade", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Butcher Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Footman Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Highland Blade", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Engraved Greatsword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Tiger Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Wraith Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Lithe Blade", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Headmans Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Reaver Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Ezomyte Blade", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Vaal Greatsword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Lion Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Infernal Sword", await ItemClass.findOneByName("Two Hand Swords")).save(),
  async () => await new BaseType("Exquisite Blade", await ItemClass.findOneByName("Two Hand Swords")).save(),
  
  async () => await new BaseType("Driftwood Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Goats Horn", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Carved Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Quartz Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Spiraled Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Sage Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Pagan Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Fauns Horn", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Engraved Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Crystal Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Serpent Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Omen Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Heathen Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Demons Horn", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Imbued Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Opal Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Tornado Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Prophecy Wand", await ItemClass.findOneByName("Wands")).save(),
  async () => await new BaseType("Profane Wand", await ItemClass.findOneByName("Wands")).save(),
  
  async () => await new BaseType("Plate Vest", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Shabby Jerkin", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Simple Robe", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Padded Vest", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Scale Vest", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Chainmail Vest", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Chestplate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Light Brigandine", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Chainmail Tunic", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Strapped Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Oiled Vest", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Silken Vest", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Buckskin Tunic", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Copper Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Scale Doublet", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Ringmail Coat", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Scholar's Robe", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Padded Jacket", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Golden Mantle", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Infantry Brigandine", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("War Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Chainmail Doublet", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Oiled Coat", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Silken Garb", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Wild Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Full Ringmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Full Scale Armour", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Scarlet Raiment", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Full Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Mage's Vestment", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Full Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Sun Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Silk Robe", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Arena Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Waxed Garb", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Soldier's Brigandine", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Full Chainmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Bone Armour", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Holy Chainmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Lordly Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Thief's Garb", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Field Lamellar", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Cabalist Regalia", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Eelskin Tunic", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Sage's Robe", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Bronze Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Wyrmscale Doublet", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Latticed Ringmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Quilted Jacket", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Silken Wrap", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Battle Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Frontier Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Hussar Brigandine", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Crusader Chainmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Sleek Coat", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Conjurer's Vestment", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Sun Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Glorious Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Full Wyrmscale", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Ornate Ringmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Crimson Raiment", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Colosseum Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Coronal Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Spidersilk Robe", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Commander's Brigandine", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Chain Hauberk", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Lacquered Garb", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Destroyer Regalia", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Majestic Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Cutthroat's Garb", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Battle Lamellar", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Devout Chainmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Crypt Armour", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Savant's Robe", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Sharkskin Tunic", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Golden Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Dragonscale Doublet", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Loricated Ringmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Crusader Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Destiny Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Sentinel Jacket", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Necromancer Silks", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Desert Brigandine", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Conquest Chainmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Exquisite Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Occultist's Vestment", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Astral Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Varnished Coat", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Full Dragonscale", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Elegant Ringmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Blood Raiment", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Gladiator Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Widowsilk Robe", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Zodiac Leather", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("General's Brigandine", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Saint's Hauberk", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Assassin's Garb", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Vaal Regalia", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Glorious Plate", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Sadist Garb", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Triumphant Lamellar", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Saintly Chainmail", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Carnal Armour", await ItemClass.findOneByName("Body Armours")).save(),
  async () => await new BaseType("Sacrificial Garb", await ItemClass.findOneByName("Body Armours")).save(),
  
  async () => await new BaseType("Iron Greaves", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Rawhide Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Wool Shoes", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Chain Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Wrapped Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Leatherscale Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Velvet Slippers", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Steel Greaves", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Goathide Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Ringmail Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Strapped Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Ironscale Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Deerskin Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Silk Slippers", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Plated Greaves", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Clasped Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Mesh Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Bronzescale Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Scholar Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Reinforced Greaves", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Nubuck Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Shackled Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Riveted Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Steelscale Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Antique Greaves", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Satin Slippers", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Eelskin Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Zealot Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Trapper Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Serpentscale Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Samite Slippers", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Sharkskin Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Ancient Greaves", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Ambush Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Soldier Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Wyrmscale Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Conjurer Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Goliath Greaves", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Carnal Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Shagreen Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Legion Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Hydrascale Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Arcanist Slippers", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Vaal Greaves", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Stealth Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Assassin's Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Crusader Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Dragonscale Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Sorcerer Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Titan Greaves", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Murder Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Slink Boots", await ItemClass.findOneByName("Boots")).save(),
  async () => await new BaseType("Two-Toned Boots", await ItemClass.findOneByName("Boots")).save(),
  
  async () => await new BaseType("Iron Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Rawhide Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Wool Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Fishscale Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Wrapped Mitts", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Chain Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Goathide Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Plated Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Velvet Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Ironscale Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Strapped Mitts", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Ringmail Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Deerskin Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Bronze Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Silk Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Bronzescale Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Clasped Mitts", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Mesh Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Nubuck Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Steel Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Trapper Mitts", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Steelscale Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Embroidered Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Riveted Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Eelskin Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Antique Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Satin Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Serpentscale Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Zealot Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Sharkskin Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Ambush Mitts", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Samite Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Ancient Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Wyrmscale Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Carnal Mitts", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Soldier Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Goliath Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Shagreen Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Conjurer Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Legion Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Assassin's Mitts", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Hydrascale Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Arcanist Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Stealth Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Vaal Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Crusader Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Murder Mitts", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Dragonscale Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Titan Gauntlets", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Sorcerer Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Slink Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Gripped Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Fingerless Silk Gloves", await ItemClass.findOneByName("Gloves")).save(),
  async () => await new BaseType("Spiked Gloves", await ItemClass.findOneByName("Gloves")).save(),
  
  async () => await new BaseType("Iron Hat", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Leather Cap", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Vine Circlet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Scare Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Battered Helm", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Rusted Coif", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Cone Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Iron Circlet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Plague Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Tricorne", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Soldier Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Sallet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Iron Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Torture Cage", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Barbute Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Leather Hood", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Great Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Visored Sallet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Close Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Tribal Circlet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Festival Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Wolf Pelt", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Crusader Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Gilded Sallet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Bone Circlet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Gladiator Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Golden Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Secutor Helm", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Aventail Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Raven Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Lunaris Circlet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Reaver Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Hunter Hood", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Fencer Helm", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Zealot Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Callous Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Noble Tricorne", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Siege Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Steel Circlet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Lacquered Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Regicide Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Great Crown", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Necromancer Circlet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Ursine Pelt", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Samite Helmet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Harlequin Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Fluted Bascinet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Magistrate Crown", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Solaris Circlet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Ezomyte Burgonet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Silken Hood", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Vaal Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Pig-Faced Bascinet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Prophet Crown", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Sinner Tricorne", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Royal Burgonet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Mind Cage", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Nightmare Bascinet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Deicide Mask", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Praetor Crown", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Hubris Circlet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Eternal Burgonet", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Lion Pelt", await ItemClass.findOneByName("Helmets")).save(),
  async () => await new BaseType("Bone Helmet", await ItemClass.findOneByName("Helmets")).save(),
  
  async () => await new BaseType("Two-Point Arrow Quiver", await ItemClass.findOneByName("Quivers")).save(),
  async () => await new BaseType("Serrated Arrow Quiver", await ItemClass.findOneByName("Quivers")).save(),
  async () => await new BaseType("Sharktooth Arrow Quiver", await ItemClass.findOneByName("Quivers")).save(),
  async () => await new BaseType("Blunt Arrow Quiver", await ItemClass.findOneByName("Quivers")).save(),
  async () => await new BaseType("Fire Arrow Quiver", await ItemClass.findOneByName("Quivers")).save(),
  async () => await new BaseType("Broadhead Arrow Quiver", await ItemClass.findOneByName("Quivers")).save(),
  async () => await new BaseType("Penetrating Arrow Quiver", await ItemClass.findOneByName("Quivers")).save(),
  async () => await new BaseType("Ornate Arrow Quiver", await ItemClass.findOneByName("Quivers")).save(),
  async () => await new BaseType("Spike-Point Arrow Quiver", await ItemClass.findOneByName("Quivers")).save(),
  
  async () => await new BaseType("Splintered Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Goathide Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Twig Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Rotted Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Corroded Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Spiked Bundle", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Plank Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Pine Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Yew Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Rawhide Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Driftwood Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Fir Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Linden Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Bone Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Painted Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Cedar Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Studded Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Alloyed Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Reinforced Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Hammered Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Tarnished Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Copper Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Layered Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Burnished Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Scarlet Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Jingling Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("War Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Reinforced Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Brass Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Splendid Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Ornate Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Gilded Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Ceremonial Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Painted Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Walnut Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Oak Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Maple Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Buckskin Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Redwood Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Etched Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Ivory Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Enameled Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Mahogany Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Spiked Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Compound Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Ancient Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Steel Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Corrugated Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Bronze Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Crimson Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Polished Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Chiming Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Laminated Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Battle Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Girded Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Thorium Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Baroque Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Sovereign Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Golden Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Angelic Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Crested Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Lacewood Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Ironwood Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Alder Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Shagreen Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Teak Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Branded Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Fossilised Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Lacquered Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Ebony Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Ezomyte Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Spiny Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Vaal Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Champion Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Vaal Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Ezomyte Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Mosaic Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Harmonic Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Cardinal Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Crusader Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Mirrored Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Colossal Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Titanium Spirit Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Archon Kite Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Imperial Buckler", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Supreme Spiked Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Elegant Round Shield", await ItemClass.findOneByName("Shields")).save(),
  async () => await new BaseType("Pinnacle Tower Shield", await ItemClass.findOneByName("Shields")).save(),
  
  async () => await new BaseType("Coral Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Coral Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Paua Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Amber Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Jade Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Lapis Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Gold Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Agate Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Citrine Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Turquoise Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Onyx Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Marble Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Blue Pearl Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Jet Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Ruby Amulet", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Ashscale Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Avian Twins Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Black Maw Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Bonespire Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Breakrib Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Chrysalis Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Clutching Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Deadhand Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Deep One Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Fangjaw Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Greatwolf Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Hexclaw Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Horned Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Lone Antler Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Longtooth Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Mandible Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Monkey Paw Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Monkey Twins Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Rotfeather Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Spinefuse Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Splitnewt Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Three Hands Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Three Rat Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Undying Flesh Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Wereclaw Talisman", await ItemClass.findOneByName("Amulets")).save(),
  async () => await new BaseType("Writhing Talisman", await ItemClass.findOneByName("Amulets")).save(),
  
  async () => await new BaseType("Breach Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Coral Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Iron Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Paua Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Unset Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Sapphire Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Topaz Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Ruby Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Diamond Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Gold Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Moonstone Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Two-Stone Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Amethyst Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Prismatic Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Opal Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Steel Ring", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Golden Hoop", await ItemClass.findOneByName("Rings")).save(),
  async () => await new BaseType("Jet Ring", await ItemClass.findOneByName("Rings")).save(),
  
  async () => await new BaseType("Cloth Belt", await ItemClass.findOneByName("Belts")).save(),
  async () => await new BaseType("Chain Belt", await ItemClass.findOneByName("Belts")).save(),
  async () => await new BaseType("Crystal Belt", await ItemClass.findOneByName("Belts")).save(),
  async () => await new BaseType("Heavy Belt", await ItemClass.findOneByName("Belts")).save(),
  async () => await new BaseType("Leather Belt", await ItemClass.findOneByName("Belts")).save(),
  async () => await new BaseType("Rustic Sash", await ItemClass.findOneByName("Belts")).save(),
  async () => await new BaseType("Studded Belt", await ItemClass.findOneByName("Belts")).save(),
  async () => await new BaseType("Stygian Vise", await ItemClass.findOneByName("Belts")).save(),
  async () => await new BaseType("Vanguard Belt", await ItemClass.findOneByName("Belts")).save(),
  
  async () => await new BaseType("Small Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Medium Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Large Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Greater Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Grand Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Giant Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Colossal Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Sacred Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Hallowed Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Sanctified Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Divine Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  async () => await new BaseType("Eternal Life Flask", await ItemClass.findOneByName("Life Flasks")).save(),
  
  async () => await new BaseType("Small Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Medium Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Large Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Greater Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Grand Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Giant Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Colossal Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Sacred Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Hallowed Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Sanctified Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Divine Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  async () => await new BaseType("Eternal Mana Flask", await ItemClass.findOneByName("Mana Flasks")).save(),
  
  async () => await new BaseType("Small Hybrid Flask", await ItemClass.findOneByName("Hybrid Flasks")).save(),
  async () => await new BaseType("Medium Hybrid Flask", await ItemClass.findOneByName("Hybrid Flasks")).save(),
  async () => await new BaseType("Large Hybrid Flask", await ItemClass.findOneByName("Hybrid Flasks")).save(),
  async () => await new BaseType("Colossal Hybrid Flask", await ItemClass.findOneByName("Hybrid Flasks")).save(),
  async () => await new BaseType("Sacred Hybrid Flask", await ItemClass.findOneByName("Hybrid Flasks")).save(),
  async () => await new BaseType("Hallowed Hybrid Flask", await ItemClass.findOneByName("Hybrid Flasks")).save(),
  
  async () => await new BaseType("Amethyst Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Aquamarine Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Basalt Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Bismuth Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Granite Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Jade Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Quartz Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Quicksilver Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Ruby Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Sapphire Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Silver Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Stibnite Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Sulphur Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  async () => await new BaseType("Topaz Flask", await ItemClass.findOneByName("Utility Flasks")).save(),
  
  async () => await new BaseType("Diamond Flask", await ItemClass.findOneByName("Critical Utility Flasks")).save(),
  
  async () => await new BaseType("Cobalt Jewel", await ItemClass.findOneByName("Jewel")).save(),
  async () => await new BaseType("Crimson Jewel", await ItemClass.findOneByName("Jewel")).save(),
  async () => await new BaseType("Viridian Jewel", await ItemClass.findOneByName("Jewel")).save(),
  
  async () => await new BaseType("Ghastly Eye Jewel", await ItemClass.findOneByName("Abyss Jewel")).save(),
  async () => await new BaseType("Hypnotic Eye Jewel", await ItemClass.findOneByName("Abyss Jewel")).save(),
  async () => await new BaseType("Murderous Eye Jewel", await ItemClass.findOneByName("Abyss Jewel")).save(),
  async () => await new BaseType("Searching Eye Jewel", await ItemClass.findOneByName("Abyss Jewel")).save(),
  
  async () => await new BaseType("Portal", await ItemClass.findOneByName("Active Skill Gems")).save(),
  async () => await new BaseType("Vaal Breach", await ItemClass.findOneByName("Active Skill Gems")).save(),
  
  async () => await new BaseType("Empower Support", await ItemClass.findOneByName("Support Skill Gems")).save(),
  async () => await new BaseType("Enlighten Support", await ItemClass.findOneByName("Support Skill Gems")).save(),
  async () => await new BaseType("Enhance Support", await ItemClass.findOneByName("Support Skill Gems")).save(),
  async () => await new BaseType("Added Chaos Damage Support", await ItemClass.findOneByName("Support Skill Gems")).save(),
  
  async () => await new BaseType("Albino Rhoa Feather", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Bestiary Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Eternal Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Unshaping Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Mirror of Kalandra", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Mirror Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Exalted Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Exalted Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Annulment", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Annulment Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Divine Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Ancient Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Ancient Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Harbinger's Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Harbinger's Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Stacked Deck", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Engineer's Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Engineer's Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Chaos Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Chaos Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Regret", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vaal Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Horizons", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Horizon Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Fusing", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Binding", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Binding Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Alchemy", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Alchemy Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Scouring", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Regal Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Regal Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Alteration", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Alteration Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Silver Coin", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Chromatic Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Jeweller's Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Chance", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Augmentation", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Orb of Transmutation", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Transmutation Shard", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Blessed Orb", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Portal Scroll", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Scroll of Wisdom", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Scroll Fragment", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Gemcutter's Prism", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Cartographer's Chisel", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Glassblower's Bauble", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Blacksmith's Whetstone", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Armourer's Scrap", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Apprentice Cartographer's Sextant", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Journeyman Cartographer's Sextant", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Master Cartographer's Sextant", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Journeyman Cartographer's Seal", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Apprentice Cartographer's Seal", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Master Cartographer's Seal", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Perandus Coin", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Blessing of Chayula", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Blessing of Esh", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Blessing of Tul", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Blessing of Uul-Netol", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Blessing of Xoph", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Splinter of Chayula", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Splinter of Esh", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Splinter of Tul", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Splinter of Uul-Netol", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Splinter of Xoph", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Timeless Eternal Empire Splinter", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Timeless Karui Splinter", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Timeless Maraketh Splinter", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Timeless Templar Splinter", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Timeless Vaal Splinter", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vial of Awakening", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vial of Consequence", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vial of Dominance", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vial of Fate", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vial of Sacrifice", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vial of Summoning", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vial of the Ghost", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vial of the Ritual", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Vial of Transcendence", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Aberrant Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Aetheric Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Bloodstained Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Bound Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Corroded Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Dense Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Enchanted Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Encrusted Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Faceted Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Fractured Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Frigid Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Gilded Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Glyphic Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Hollow Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Jagged Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Lucent Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Metallic Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Perfect Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Prismatic Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Pristine Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Sanctified Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Scorched Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Serrated Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shuddering Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Tangled Fossil", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Muttering Essence of Anger", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Anger", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Anger", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Anger", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Anger", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Anger", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Anguish", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Anguish", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Anguish", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Anguish", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Whispering Essence of Contempt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Muttering Essence of Contempt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Contempt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Contempt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Contempt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Contempt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Contempt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Essence of Delirium", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Doubt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Doubt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Doubt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Doubt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Doubt", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Dread", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Dread", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Dread", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Envy", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Envy", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Envy", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Muttering Essence of Fear", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Fear", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Fear", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Fear", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Fear", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Fear", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Whispering Essence of Greed", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Muttering Essence of Greed", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Greed", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Greed", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Greed", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Greed", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Greed", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Whispering Essence of Hatred", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Muttering Essence of Hatred", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Hatred", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Hatred", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Hatred", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Hatred", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Hatred", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Essence of Horror", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Essence of Hysteria", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Essence of Insanity", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Loathing", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Loathing", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Loathing", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Loathing", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Misery", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Misery", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Misery", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Rage", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Rage", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Rage", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Rage", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Rage", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Scorn", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Scorn", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Scorn", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Muttering Essence of Sorrow", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Sorrow", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Sorrow", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Sorrow", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Sorrow", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Sorrow", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Spite", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Spite", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Spite", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Spite", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Suffering", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Suffering", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Suffering", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Suffering", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Suffering", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Muttering Essence of Torment", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Torment", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Torment", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Torment", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Torment", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Torment", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Whispering Essence of Woe", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Muttering Essence of Woe", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Woe", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Woe", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Woe", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Woe", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Woe", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Weeping Essence of Wrath", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Wrath", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Wrath", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Wrath", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Wrath", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Wailing Essence of Zeal", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Screaming Essence of Zeal", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Shrieking Essence of Zeal", await ItemClass.findOneByName("Stackable Currency")).save(),
  async () => await new BaseType("Deafening Essence of Zeal", await ItemClass.findOneByName("Stackable Currency")).save(),
  
  async () => await new BaseType("Primitive Alchemical Resonator", await ItemClass.findOneByName("Delve Socketable Currency")).save(),
  async () => await new BaseType("Potent Alchemical Resonator", await ItemClass.findOneByName("Delve Socketable Currency")).save(),
  async () => await new BaseType("Powerful Alchemical Resonator", await ItemClass.findOneByName("Delve Socketable Currency")).save(),
  async () => await new BaseType("Prime Alchemical Resonator", await ItemClass.findOneByName("Delve Socketable Currency")).save(),
  async () => await new BaseType("Primitive Chaotic Resonator", await ItemClass.findOneByName("Delve Socketable Currency")).save(),
  async () => await new BaseType("Potent Chaotic Resonator", await ItemClass.findOneByName("Delve Socketable Currency")).save(),
  async () => await new BaseType("Powerful Chaotic Resonator", await ItemClass.findOneByName("Delve Socketable Currency")).save(),
  async () => await new BaseType("Prime Chaotic Resonator", await ItemClass.findOneByName("Delve Socketable Currency")).save(),
  
  async () => await new BaseType("A Dab of Ink", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("A Mother's Parting Gift", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Abandoned Wealth", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Alluring Bounty", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Alone in the Darkness", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Anarchy's Price", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Arrogance of the Vaal", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Assassin's Favour", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Atziri's Arsenal", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Audacity", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Beauty Through Death", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Blessing of God", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Blind Venture", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Boon of Justice", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Boon of the First Ones", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Boundless Realms", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Bowyer's Dream", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Buried Treasure", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Burning Blood", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Call to the First Ones", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Cartographer's Delight", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Chaotic Disposition", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Coveted Possession", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Dark Dreams", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Dark Temptation", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Death", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Demigod's Wager", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Destined to Crumble", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Dialla's Subjugation", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Doedre's Madness", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Earth Drinker", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Echoes of Love", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Emperor of Purity", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Emperor's Luck", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Forbidden Power", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Gemcutter's Promise", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Gift of the Gemling Queen", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Glimmer of Hope", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Grave Knowledge", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Harmony of Souls", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Her Mask", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Heterochromia", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Hope", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("House of Mirrors", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Hubris", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Humility", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Hunter's Resolve", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Hunter's Reward", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Immortal Resolve", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Imperial Legacy", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Jack in the Box", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Lantador's Lost Love", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Last Hope", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Left to Fate", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Light and Truth", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Lingering Remnants", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Lost Worlds", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Loyalty", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Lucky Connections", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Lucky Deck", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Lysah's Respite", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Mawr Blaidd", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Merciless Armament", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Might is Right", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Mitts", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Monochrome", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("No Traces", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Perfection", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Pride Before the Fall", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Pride of the First Ones", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Prosperity", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Rain of Chaos", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Rain Tempter", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Rats", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Rebirth", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Sambodhi's Vow", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Scholar of the Seas", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Seven Years Bad Luck", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Shard of Fate", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Struck by Lightning", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Admirer", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Aesthete", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Archmage's Right Hand", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Arena Champion", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Army of Blood", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Artist", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Avenger", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Battle Born", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Beast", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Betrayal", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Blazing Fire", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Body", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Breach", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Brittle Emperor", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Cacophony", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Calling", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Carrion Crow", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Cartographer", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Cataclysm", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Catalyst", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Celestial Justicar", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Celestial Stone", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Chains that Bind", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Coming Storm", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Conduit", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Cursed King", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Dapper Prodigy", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Dark Mage", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Darkest Dream", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Deceiver", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Deep Ones", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Demoness", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Doctor", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Doppelganger", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Dragon", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Dragon's Heart", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Dreamer", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Dreamland", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Drunken Aristocrat", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Encroaching Darkness", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Endless Darkness", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Endurance", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Enlightened", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Ethereal", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Explorer", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Eye of the Dragon", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Fathomless Depths", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Feast", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Fiend", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Fletcher", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Flora's Gift", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Fool", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Formless Sea", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Forsaken", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Fox", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Gambler", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Garish Power", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Gemcutter", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Gentleman", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Gladiator", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Golden Era", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Hale Heart", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Harvester", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Hermit", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Hoarder", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Hunger", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Immortal", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Incantation", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Innocent", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Inoculated", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Insatiable", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Inventor", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Iron Bard", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Jester", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Jeweller's Boon", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Journey", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The King's Blade", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The King's Heart", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Landing", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Last One Standing", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Lich", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Life Thief", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Lion", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Lord in Black", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Lord of Celebration", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Lover", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Lunaris Priestess", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Mad King", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Master", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Master Artisan", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Mayor", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Mercenary", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Messenger", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Metalsmith's Gift", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Nurse", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Oath", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Obscured", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Offering", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The One With All", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Opulent", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Pack Leader", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Pact", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Penitent", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Poet", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Polymath", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Porcupine", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Price of Protection", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Primordial", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Professor", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Puzzle", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Queen", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Rabid Rhoa", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Realm", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Risk", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Rite of Elements", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Road to Power", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Ruthless Ceinture", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Sacrifice", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Saint's Treasure", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Samurai's Eye", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Scarred Meadow", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Scavenger", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Scholar", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Seeker", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Sephirot", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Sigil", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Siren", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Soul", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Spark and the Flame", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Spoiled Prince", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Standoff", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Stormcaller", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Summoner", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Sun", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Surgeon", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Surveyor", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Survivalist", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Sword King's Salute", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Thaumaturgist", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Throne", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Tower", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Traitor", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Trial", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Twilight Moon", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Twins", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Tyrant", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Undaunted", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Undisputed", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Union", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Valkyrie", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Valley of Steel Boxes", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Vast", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Visionary", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Void", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Warden", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Warlord", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Watcher", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Web", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Wilted Rose", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Wind", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Witch", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Wolf", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Wolf's Shadow", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Wolven King's Bite", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Wolverine", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The World Eater", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Wrath", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("The Wretched", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Thirst for Knowledge", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Three Faces in the Dark", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Three Voices", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Thunderous Skies", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Time-Lost Relic", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Tranquillity", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Treasure Hunter", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Turn the Other Cheek", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Vanity", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Vinia's Token", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Volatile Power", await ItemClass.findOneByName("Divination Card")).save(),
  async () => await new BaseType("Wealth and Power", await ItemClass.findOneByName("Divination Card")).save(),
  
  async () => await new BaseType("Abyssal Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Cartographer's Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Celestial Armoursmith's Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Celestial Blacksmith's Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Celestial Jeweller's Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Decadent Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Diviner's Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Eldritch Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Enchanted Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Fine Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Foreboding Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Fossilised Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Fragmented Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Gemcutter's Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Geomancer's Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Infused Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Mysterious Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Obscured Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Ornate Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Otherworldly Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Primal Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Singular Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Skittering Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Thaumaturge's Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Time-Lost Incubator", await ItemClass.findOneByName("Incubator")).save(),
  async () => await new BaseType("Whispering Incubator", await ItemClass.findOneByName("Incubator")).save(),
  
  async () => await new BaseType("Beach Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Dungeon Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Graveyard Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Lookout Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Alleyways Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Arid Lake Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Desert Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Flooded Mine Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Marshes Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Pen Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Arcade Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Burial Chambers Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Cage Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Cells Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Excavation Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Iceberg Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Leyline Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Peninsula Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Port Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Fungal Hollow Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Canyon Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Chateau Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("City Square Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Courthouse Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Glacier Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Grotto Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Lighthouse Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Relic Chambers Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Strand Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Volcano Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Ancient City Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Barrows Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Channel Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Conservatory Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Haunted Mansion Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Ivory Temple Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Maze Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Spider Lair Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Sulphur Vents Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Toxic Sewer Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Academy Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Atoll Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Ashen Wood Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Cemetery Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Fields Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Jungle Valley Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Mausoleum Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Phantasmagoria Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Thicket Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Underground Sea Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Wharf Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Arachnid Nest Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Bazaar Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Bone Crypt Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Coral Ruins Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Dunes Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Gardens Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Lava Chamber Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Ramparts Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Residence Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Underground River Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Armoury Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Courtyard Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Geode Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Infested Valley Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Laboratory Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Mineral Pools Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Mud Geyser Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Overgrown Ruin Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Shore Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Tropical Island Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Vaal Pyramid Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Arena Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Estuary Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Moon Temple Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Museum Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Plateau Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Scriptorium Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Sepulchre Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Temple Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Tower Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Vault Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Waste Pool Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Arachnid Tomb Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Belfry Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Bog Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Cursed Crypt Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Orchard Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Pier Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Precinct Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Shipyard Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Siege Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Wasteland Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Colonnade Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Coves Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Factory Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Mesa Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Lair Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Pit Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Primordial Pool Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Promenade Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Spider Forest Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Waterways Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Castle Ruins Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Crystal Ore Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Defiled Cathedral Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Necropolis Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Overgrown Shrine Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Racecourse Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Summit Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Primordial Blocks Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Villa Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Arsenal Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Caldera Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Core Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Desert Spring Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Ghetto Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Malformation Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Park Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Shrine Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Terrace Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("The Alluring Abyss", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Acid Caverns Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Colosseum Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Crimson Temple Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Dark Forest Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Dig Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Palace Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Plaza Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Basilica Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Carcass Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Lava Lake Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Reef Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Sunken City Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Forge of the Phoenix Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Lair of the Hydra Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Maze of the Minotaur Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Pit of the Chimera Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Vaal Temple Map", await ItemClass.findOneByName("Maps")).save(),
  async () => await new BaseType("Crater Map", await ItemClass.findOneByName("Maps")).save(),
  
  async () => await new BaseType("Sacrifice at Dusk", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Sacrifice at Dawn", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Sacrifice at Noon", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Sacrifice at Midnight", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Mortal Grief", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Mortal Rage", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Mortal Ignorance", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Mortal Hope", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Volkuur's Key", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Eber's Key", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Yriel's Key", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Inya's Key", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Fragment of the Hydra", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Fragment of the Phoenix", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Fragment of the Minotaur", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Fragment of the Chimera", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Divine Vessel", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Timeless Eternal Emblem", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Timeless Karui Emblem", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Timeless Maraketh Emblem", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Timeless Templar Emblem", await ItemClass.findOneByName("Map Fragments")).save(),
  async () => await new BaseType("Timeless Vaal Emblem", await ItemClass.findOneByName("Map Fragments")).save(),
  
  async () => await new BaseType("Alira's Amulet", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Allflame", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Ammonite Glyph", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Ankh of Eternity", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Baleful Gem", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Basilisk Acid", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Bestel's Manuscript", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Black Venom", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Bottled Storm", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Bust of Gaius Sentari", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Bust of Hector Titucius", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Bust of Marceus Lioneye", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Calendar of Fortune", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Chitus' Plum", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Decanter Spiritus", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Deshret's Banner", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Elder's Orb", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Elixir of Allure", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Eye of Conquest", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Eyes of Zeal", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Firefly", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Golden Hand", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Golden Page", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Greust's Necklace", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Haliotis Glyph", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Hinekora's Hair", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Infernal Talc", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Kishara's Star", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Kraityn's Amulet", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Malachai's Entrails", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Malachai's Heart", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Malachai's Lungs", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Maligaro's Map", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Maligaro's Spike", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Master Key", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Medicine Chest", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment I", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment II", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment III", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment IV", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment V", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment VI", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment VII", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment VIII", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment IX", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment X", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment XI", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment XII", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment XIII", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment XIV", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Memory Fragment XV", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Miasmeter", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Moon Orb", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Oak's Amulet", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Obsidian Key", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Ribbon Spool", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Roseus Glyph", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Sekhema Feather", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Sewer Keys", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 1)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 2)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 3)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 4)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 5)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 6)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 7)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 8)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 9)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Shaper's Orb (Tier 10)", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Sign of Purity", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Silver Locket", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Storm Blade", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Sun Orb", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Thaumetic Emblem", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Thaumetic Sulphite", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("The Apex", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("The Black Flag", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("The Eye of Desire", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("The Eye of Fury", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("The Shaper's Key", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("The Staff of Purity", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("The Teardrop", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Tolman's Bracelet", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Tower Key", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Trarthan Powder", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Tukohama's Tooth", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Valako's Jaw", await ItemClass.findOneByName("Quest Items")).save(),
  async () => await new BaseType("Wings of Vastiri", await ItemClass.findOneByName("Quest Items")).save(),
  
  async () => await new BaseType("Silver Key", await ItemClass.findOneByName("Labyrinth Item")).save(),
  async () => await new BaseType("Golden Key", await ItemClass.findOneByName("Labyrinth Item")).save(),
  async () => await new BaseType("Treasure Key", await ItemClass.findOneByName("Labyrinth Item")).save(),
  
  async () => await new BaseType("Bane of the Loyal", await ItemClass.findOneByName("Labyrinth Trinket")).save(),
  async () => await new BaseType("Cogs of Disruption", await ItemClass.findOneByName("Labyrinth Trinket")).save(),
  async () => await new BaseType("Cube Of Absorption", await ItemClass.findOneByName("Labyrinth Trinket")).save(),
  async () => await new BaseType("Heart of the Gargoyle", await ItemClass.findOneByName("Labyrinth Trinket")).save(),
  async () => await new BaseType("Orb of Elemental Dispersion", await ItemClass.findOneByName("Labyrinth Trinket")).save(),
  async () => await new BaseType("Portal Shredder", await ItemClass.findOneByName("Labyrinth Trinket")).save(),
  async () => await new BaseType("Rod of Detonation", await ItemClass.findOneByName("Labyrinth Trinket")).save(),
  async () => await new BaseType("Sand of Eternity", await ItemClass.findOneByName("Labyrinth Trinket")).save(),
  
  async () => await new BaseType("Captured Soul of Ambrius, Legion Slayer", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Armala, the Widow", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Belcer, the Pirate Lord", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Drek, Apex Hunter", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Erebix, Light's Bane", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Glace", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Gorulis, Will-Thief", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Jorus, Sky's Edge", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Mephod, the Earth Scorcher", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Nassar, Lion of the Seas", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Queen of the Great Tangle", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Sebbert, Crescent's Point", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Spinner of False Hope", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Stalker of the Endless Dunes", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Stone of the Currents", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Tahsin, Warmaker", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Terror of the Infinite Drifts", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of The Gorgon", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of The Infernal King", await ItemClass.findOneByName("Pantheon Soul")).save(),
  async () => await new BaseType("Captured Soul of Varhesh, Shimmering Aberration", await ItemClass.findOneByName("Pantheon Soul")).save(),
  
  async () => await new BaseType("First Piece of Brutality", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("First Piece of Directions", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("First Piece of Focus", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("First Piece of Storms", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("First Piece of the Arcane", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("First Piece of Time", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Second Piece of Brutality", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Second Piece of Directions", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Second Piece of Focus", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Second Piece of Storms", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Second Piece of the Arcane", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Second Piece of Time", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Third Piece of Brutality", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Third Piece of Directions", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Third Piece of Focus", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Third Piece of Storms", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Third Piece of the Arcane", await ItemClass.findOneByName("Piece")).save(),
  async () => await new BaseType("Fourth Piece Focus", await ItemClass.findOneByName("Piece")).save(),
  
  async () => await new BaseType("Stone of Passage", await ItemClass.findOneByName("Incursion Item")).save(),
  async () => await new BaseType("Flashpowder Key", await ItemClass.findOneByName("Incursion Item")).save(),
];
